import React, { useState, useEffect, useRef } from "react";
import { Edit2, Loader2 } from "lucide-react";

function EditableTitle({ title, onSave, maxLength = 25 }) {
  const [isEditing, setIsEditing] = useState(false);
  const [newTitle, setNewTitle] = useState(title);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const inputRef = useRef(null);

  // Auto focus when edit mode starts
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isEditing]);

  const handleSave = async () => {
    const trimmed = newTitle.trim();

    if (trimmed.length === 0) {
      setError("Name cannot be empty");
      return;
    }
    if (trimmed.length > maxLength) {
      setError(`Name cannot exceed ${maxLength} characters`);
      return;
    }

    if (trimmed === title) {
      setIsEditing(false);
      return;
    }

    try {
      setIsLoading(true);
      await onSave(trimmed); // parent handles API call
      setIsEditing(false);
      setError("");
    } catch (err) {
      console.error("Failed to update pool name:", err);
      setError("Couldn't update name. Try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter") handleSave();
    if (e.key === "Escape") {
      setNewTitle(title);
      setIsEditing(false);
      setError("");
    }
  };

  return (
    <div className="flex justify-center items-center gap-2 mb-4 w-full">
      {!isEditing ? (
        <>
          <h2 className="text-2xl font-medium">{title}</h2>
          <button
            onClick={() => setIsEditing(true)}
            className="p-1 hover:bg-gray-200 rounded-full transition"
          >
            <Edit2 size={18} />
          </button>
        </>
      ) : (
        <div className="flex items-center gap-2 w-full justify-center">
          <input
            ref={inputRef}
            value={newTitle}
            onChange={(e) => {
              setNewTitle(e.target.value);
              setError("");
            }}
            onKeyDown={handleKeyDown}
            maxLength={maxLength}
            className="px-2 py-1 text-lg rounded-lg border-2 border-gray-400 w-[60%] focus:outline-none focus:border-blue-500"
          />
          <button
            disabled={
              isLoading ||
              newTitle.trim().length === 0 ||
              newTitle.trim() === title
            }
            onClick={handleSave}
            className={`px-3 py-1 rounded-md text-white font-medium transition ${
              isLoading
                ? "bg-blue-300 cursor-not-allowed"
                : newTitle.trim() === title || newTitle.trim().length === 0
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            }`}
          >
            {isLoading ? <Loader2 className="animate-spin" size={18} /> : "Save"}
          </button>
        </div>
      )}
      {error && (
        <p className="text-sm text-red-500 absolute mt-12">{error}</p>
      )}
    </div>
  );
}

export default EditableTitle;
